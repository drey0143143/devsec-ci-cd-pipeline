name: Plan and merge to Main
on:
  pull_request: 
    types: [ closed, labeled, opened ]

env:
  TERRAFORM_VERSION: 1.2.9  # 1.1.5 , #1.2.9
  TERRAGRUNT_VERSION: 0.38.10  # 0.36.2 , #0.38.10
  TERRAFORM_WORKING_DIR: './applied/accounts/testing/environment/'
  #TERRAFORM_WORKING_DIR_PROD: './applied/accounts/production/environment/'
  TERRAFORM_LOCK_HCL_PATH: "./applied/accounts/testing/environment/.terraform.lock.hcl"

permissions:
  contents: write     # write permissions are needed in order to commit changes back to the branches
  issues: write         # write permissions are needed in order to create comments


concurrency: test-environment    # This will ensure only a single workflow of merge to master is run at a time

jobs:
  plan:
    name: "Terragrunt Plan"
    #if: github.event_name == 'pull_request'
    #if: ${{ join(github.event.pull_request.labels.*.name, '') }}
    #if: github.event.label.name == 'AWSSSO'
    #if: github.base_ref == 'main' && github.event.pull_request.merged != true && ! contains(github.event.pull_request.labels.*.name, 'version-upgrade')
    #if: github.event.label.name != 'version-upgrade'
    if: github.base_ref == 'main' && github.event.pull_request.merged != true && join(github.event.pull_request.labels.*.name, '') == ''
    #if: github.event.action == 'unlabeled'
    #if: join(github.event.pull_request.labels.*.name, '') == ''
    #if: contains(github.event.label.name, 'AWSSSO')
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
           # This will checkout the branch the PR is coming from in the head repo to avoid checkoing out repo in a detached state
           ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terragrunt Init
        id: init
        run: terragrunt run-all init -lockfile=readonly -no-color --terragrunt-non-interactive

      - name: Terragrunt Validate
        id: validate
        run: terragrunt run-all validate -no-color --terragrunt-non-interactive

      - name: Terragrunt Plan
        id: plan
        run: terragrunt run-all plan -no-color --terragrunt-non-interactive
  Apply:
    name: "Run Terragrunt Apply"
    #if: github.base_ref == 'main' && github.event.pull_request.merged == true && ! contains(github.event.pull_request.labels.*.name, 'version-upgrade')
    #if: github.event.pull_request.base.ref == 'main' && github.event.pull_request.merged == true && ! contains(github.event.pull_request.labels.*.name, 'version-upgrade')
    if: github.base_ref == 'main' && github.event.pull_request.merged == true && join(github.event.pull_request.labels.*.name, '') == ''
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terragrunt Init
        id: init
        run: terragrunt run-all init -lockfile=readonly -no-color --terragrunt-non-interactive

      - name: Terragrunt Apply
        id: apply
        run: terragrunt run-all apply -no-color --terragrunt-non-interactive
        continue-on-error: true